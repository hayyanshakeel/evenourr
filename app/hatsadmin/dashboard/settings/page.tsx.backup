"use client"

import { useState, useEffect } from "react"
import { PageHeader } from "@/components/admin/page-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Separator } from "@/components/ui/separator"
import { useToast } from "@/components/ui/use-toast"
import { useLocation } from "@/hooks/useLocation"
import { getAllShippingZones, canDeleteZone, getZoneRestrictionMessage } from "@/lib/geolocation"
import { getCurrencyList } from "@/lib/currencies"
import { 
  Store, 
  CreditCard, 
  Bell, 
  Shield, 
  Palette, 
  Truck, 
  Settings,
  Globe,
  Camera,
  Upload,
  Key,
  Save,
  Edit,
  Trash2,
  Plus,
  AlertTriangle,
  Search,
  X
} from "lucide-react"

export default function SettingsPage() {
  const { toast } = useToast()
  const { location, isLoading: locationLoading } = useLocation()
  
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [formData, setFormData] = useState({
    storeName: '',
    storeDescription: '',
    storeEmail: '',
    storePhone: '',
    addressLine1: '',
    addressLine2: '',
    city: '',
    state: '',
    zip: '',
    country: '',
    currency: 'USD',
    acceptCreditCards: true,
    acceptPaypal: true,
    acceptApplePay: false,
    acceptGooglePay: false,
    multiCurrencySupport: false,
    notifyNewOrders: true,
    notifyLowStock: true,
    notifyCustomerMessages: true,
    notifyMarketingUpdates: false,
    twoFactorAuth: false,
    loginNotifications: true,
    sessionTimeout: 30,
    theme: 'system',
    sidebarAutoCollapse: true,
    compactMode: false,
    domesticShippingRate: 5.99,
    internationalShippingRate: 15.99,
    freeShippingThreshold: 75.00,
    calculateShippingTax: true,
    shippingInsurance: false,
    gpt5PreviewEnabled: false,
  })

  // Shipping zone states
  const [shippingZones, setShippingZones] = useState<any[]>([])
  const [detectedZone, setDetectedZone] = useState<any>(null)
  const [showDeleteDialog, setShowDeleteDialog] = useState<{show: boolean, zone: any}>({show: false, zone: null})
  const [deletingZone, setDeletingZone] = useState<string | null>(null)
  const [editingZone, setEditingZone] = useState<string | null>(null)
  const [editingRate, setEditingRate] = useState<string | null>(null)
  
  // Create zone modal states
  const [showCreateZoneModal, setShowCreateZoneModal] = useState(false)
  const [zoneStep, setZoneStep] = useState<'type' | 'country' | 'states' | 'rates'>('type')
  const [zoneType, setZoneType] = useState<'domestic' | 'international' | 'custom'>('domestic')
  const [zoneName, setZoneName] = useState('')
  const [selectedCountry, setSelectedCountry] = useState('')
  const [selectedStates, setSelectedStates] = useState<string[]>([])
  const [shippingRate, setShippingRate] = useState(10.00)
  const [isRateFree, setIsRateFree] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')

  // Load settings on mount
  useEffect(() => {
    const loadSettings = async () => {
      try {
        // Simulate loading settings - replace with actual API call
        const settings = {
          storeName: 'My Store',
          storeDescription: 'Store description',
          storeEmail: 'store@example.com',
          storePhone: '+1234567890',
          addressLine1: '123 Main St',
          addressLine2: '',
          city: 'City',
          state: 'State',
          zip: '12345',
          country: 'us',
          currency: 'USD',
          acceptCreditCards: true,
          acceptPaypal: true,
          acceptApplePay: false,
          acceptGooglePay: false,
          multiCurrencySupport: false,
          notifyNewOrders: true,
          notifyLowStock: true,
          notifyCustomerMessages: true,
          notifyMarketingUpdates: false,
          twoFactorAuth: false,
          loginNotifications: true,
          sessionTimeout: 30,
          theme: 'system',
          sidebarAutoCollapse: true,
          compactMode: false,
          domesticShippingRate: 5.99,
          internationalShippingRate: 15.99,
          freeShippingThreshold: 75.00,
          calculateShippingTax: true,
          shippingInsurance: false,
          gpt5PreviewEnabled: false,
        }
        
        setFormData({
          storeName: settings.storeName || '',
          storeDescription: settings.storeDescription || '',
          storeEmail: settings.storeEmail || '',
          storePhone: settings.storePhone || '',
          addressLine1: settings.addressLine1 || '',
          addressLine2: settings.addressLine2 || '',
          city: settings.city || '',
          state: settings.state || '',
          zip: settings.zip || '',
          country: settings.country || 'us',
          currency: settings.currency || 'USD',
          acceptCreditCards: settings.acceptCreditCards ?? true,
          acceptPaypal: settings.acceptPaypal ?? true,
          acceptApplePay: settings.acceptApplePay ?? false,
          acceptGooglePay: settings.acceptGooglePay ?? false,
          multiCurrencySupport: settings.multiCurrencySupport ?? false,
          notifyNewOrders: settings.notifyNewOrders ?? true,
          notifyLowStock: settings.notifyLowStock ?? true,
          notifyCustomerMessages: settings.notifyCustomerMessages ?? true,
          notifyMarketingUpdates: settings.notifyMarketingUpdates ?? false,
          twoFactorAuth: settings.twoFactorAuth ?? false,
          loginNotifications: settings.loginNotifications ?? true,
          sessionTimeout: settings.sessionTimeout ?? 30,
          theme: settings.theme || 'system',
          sidebarAutoCollapse: settings.sidebarAutoCollapse ?? true,
          compactMode: settings.compactMode ?? false,
          domesticShippingRate: settings.domesticShippingRate ?? 5.99,
          internationalShippingRate: settings.internationalShippingRate ?? 15.99,
          freeShippingThreshold: settings.freeShippingThreshold ?? 75.00,
          calculateShippingTax: settings.calculateShippingTax ?? true,
          shippingInsurance: settings.shippingInsurance ?? false,
          gpt5PreviewEnabled: settings.gpt5PreviewEnabled ?? false,
        })
      } catch (error) {
        console.error('Failed to load settings:', error)
      } finally {
        setLoading(false)
      }
    }

    loadSettings()
  }, [])

  // Update detected zone when location is available
  useEffect(() => {
    if (location) {
      const zones = getAllShippingZones(location)
      const detected = zones.find(z => z.id === 'domestic') || zones[0]
      setDetectedZone(detected)
    }
  }, [location])

  // Update shipping zones when location changes
  useEffect(() => {
    if (location) {
      const zones = getAllShippingZones(location)
      console.log('🚀 Loading shipping zones:', zones.map(z => ({ id: z.id, name: z.name, canDelete: canDeleteZone(z.id) })))
      setShippingZones(zones)
    }
  }, [location])

  const currencyOptions = getCurrencyList()

  const updateFormData = (key: string, value: any) => {
    setFormData(prev => ({ ...prev, [key]: value }))
  }

  const handleDeleteZone = async (zoneId: string, zoneName: string) => {
    // Show confirmation dialog first
    const zone = shippingZones.find(z => z.id === zoneId)
    if (zone) {
      setShowDeleteDialog({show: true, zone})
    }
  }

  const confirmDeleteZone = async () => {
    const { zone } = showDeleteDialog
    if (!zone) return

    if (!canDeleteZone(zone.id)) {
      toast({
        title: "Cannot delete zone",
        description: getZoneRestrictionMessage(zone.id) || "This zone cannot be deleted.",
        variant: "destructive",
      })
      setShowDeleteDialog({show: false, zone: null})
      return
    }

    setDeletingZone(zone.id)
    try {
      // Remove zone from state
      setShippingZones(prev => prev.filter(z => z.id !== zone.id))
      
      toast({
        title: "Zone deleted",
        description: `${zone.name} shipping zone has been removed.`,
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to delete shipping zone. Please try again.",
        variant: "destructive",
      })
    } finally {
      setDeletingZone(null)
      setShowDeleteDialog({show: false, zone: null})
    }
  }

  const handleCreateZone = () => {
    // Reset and open the create zone modal
    setShowCreateZoneModal(true)
    setZoneStep('type')
    setZoneType('domestic')
    setZoneName('')
    setSelectedCountry('')
    setSelectedStates([])
    setShippingRate(10.00)
    setIsRateFree(false)
    setSearchQuery('')
  }

  // Comprehensive country and state data
  const countriesData: {[key: string]: {flag: string, states: string[]}} = {
    'United States': {
      flag: '🇺🇸',
      states: [
        'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado',
        'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho',
        'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
        'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
        'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada',
        'New Hampshire', 'New Jersey', 'New Mexico', 'New York',
        'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon',
        'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota',
        'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington',
        'West Virginia', 'Wisconsin', 'Wyoming'
      ]
    },
    'Canada': {
      flag: '🇨🇦',
      states: [
        'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick',
        'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia',
        'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan',
        'Yukon'
      ]
    },
    'United Kingdom': {
      flag: '🇬🇧',
      states: ['England', 'Scotland', 'Wales', 'Northern Ireland']
    },
    'Australia': {
      flag: '🇦🇺',
      states: [
        'New South Wales', 'Victoria', 'Queensland', 'Western Australia',
        'South Australia', 'Tasmania', 'Northern Territory',
        'Australian Capital Territory'
      ]
    },
    'India': {
      flag: '🇮🇳',
      states: [
        'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
        'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir',
        'Jharkhand', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra',
        'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha',
        'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana',
        'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'
      ]
    },
    'Germany': { flag: '🇩🇪', states: [] },
    'France': { flag: '🇫🇷', states: [] },
    'Italy': { flag: '🇮🇹', states: [] },
    'Spain': { flag: '🇪🇸', states: [] },
    'Netherlands': { flag: '🇳🇱', states: [] },
    'Brazil': { flag: '🇧🇷', states: [] },
    'Argentina': { flag: '🇦🇷', states: [] },
    'Mexico': { flag: '🇲🇽', states: [] },
    'Japan': { flag: '🇯🇵', states: [] },
    'South Korea': { flag: '🇰🇷', states: [] },
    'China': { flag: '🇨🇳', states: [] },
    'Russia': { flag: '🇷🇺', states: [] }
  }

  // Filter countries based on search
  const filteredCountries = Object.entries(countriesData).filter(([country]) =>
    country.toLowerCase().includes(searchQuery.toLowerCase())
  )

  // Handle zone type selection
  const handleZoneTypeSelect = (type: 'domestic' | 'international' | 'custom') => {
    setZoneType(type)
    
    if (type === 'domestic' || type === 'international') {
      setZoneStep('rates')
      setZoneName(type === 'domestic' ? 'Domestic Shipping' : 'International Shipping')
    } else {
      setZoneStep('country')
    }
  }

  // Handle country selection
  const handleCountrySelect = (country: string) => {
    setSelectedCountry(country)
    setSelectedStates([])
    
    if (countriesData[country]?.states?.length > 0) {
      setZoneStep('states')
    } else {
      setZoneStep('rates')
    }
  }

  // Handle state selection
  const handleStateSelect = (state: string) => {
    setSelectedStates(prev => 
      prev.includes(state) 
        ? prev.filter(s => s !== state)
        : [...prev, state]
    )
  }

  // Select all states
  const handleSelectAllStates = () => {
    const countryStates = countriesData[selectedCountry]?.states || []
    setSelectedStates(countryStates)
  }

  // Clear all states
  const handleClearAllStates = () => {
    setSelectedStates([])
  }

  // Create the shipping zone
  const handleCreateShippingZone = () => {
    if (zoneType === 'custom' && (!zoneName || !selectedCountry)) {
      toast({
        title: "Missing information",
        description: "Please provide zone name and select a country.",
        variant: "destructive",
      })
      return
    }

    if (zoneType === 'custom' && countriesData[selectedCountry]?.states?.length > 0 && selectedStates.length === 0) {
      toast({
        title: "No states selected",
        description: "Please select at least one state for this shipping zone.",
        variant: "destructive",
      })
      return
    }

    // Create new zone
    const newZone = {
      id: `${zoneType}-${Date.now()}`,
      name: zoneName,
      type: zoneType,
      countries: zoneType === 'custom' ? [selectedCountry] : [zoneType],
      states: selectedStates,
      flag: zoneType === 'custom' ? (countriesData[selectedCountry]?.flag || '🌍') : 
            (zoneType === 'domestic' ? '🏠' : '🌍'),
      description: zoneType === 'custom' 
        ? `Custom zone for ${selectedCountry}${selectedStates.length > 0 ? ` (${selectedStates.length} states)` : ''}`
        : `${zoneType === 'domestic' ? 'Domestic' : 'International'} shipping zone`,
      rate: isRateFree ? 0 : shippingRate,
      isFree: isRateFree,
      delivery_time: zoneType === 'domestic' ? '2-5 business days' : 
                     zoneType === 'international' ? '7-14 business days' : '5-10 business days'
    }
    
    setShippingZones(prev => [...prev, newZone])
    setShowCreateZoneModal(false)
    
    toast({
      title: "Zone created",
      description: `${zoneName} has been created successfully.`,
    })
  }

  // Comprehensive country and state data organized by continents
  const countryStateData: {[key: string]: {flag: string, states: string[], continent: string}} = {
    // North America
    'United States': {
      flag: '��',
      continent: 'North America',
      states: [
        'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado',
        'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho',
        'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
        'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
        'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada',
        'New Hampshire', 'New Jersey', 'New Mexico', 'New York',
        'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon',
        'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota',
        'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington',
        'West Virginia', 'Wisconsin', 'Wyoming'
      ]
    },
    'Canada': {
      flag: '🇨🇦',
      continent: 'North America',
      states: [
        'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick',
        'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia',
        'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan',
        'Yukon'
      ]
    },
    'Mexico': {
      flag: '🇲🇽',
      continent: 'North America',
      states: [
        'Aguascalientes', 'Baja California', 'Baja California Sur', 'Campeche',
        'Chiapas', 'Chihuahua', 'Coahuila', 'Colima', 'Durango', 'Guanajuato',
        'Guerrero', 'Hidalgo', 'Jalisco', 'México', 'Michoacán', 'Morelos',
        'Nayarit', 'Nuevo León', 'Oaxaca', 'Puebla', 'Querétaro', 'Quintana Roo',
        'San Luis Potosí', 'Sinaloa', 'Sonora', 'Tabasco', 'Tamaulipas',
        'Tlaxcala', 'Veracruz', 'Yucatán', 'Zacatecas'
      ]
    },

    // South America
    'Brazil': {
      flag: '🇧🇷',
      continent: 'South America',
      states: [
        'Acre', 'Alagoas', 'Amapá', 'Amazonas', 'Bahia', 'Ceará',
        'Distrito Federal', 'Espírito Santo', 'Goiás', 'Maranhão',
        'Mato Grosso', 'Mato Grosso do Sul', 'Minas Gerais', 'Pará',
        'Paraíba', 'Paraná', 'Pernambuco', 'Piauí', 'Rio de Janeiro',
        'Rio Grande do Norte', 'Rio Grande do Sul', 'Rondônia',
        'Roraima', 'Santa Catarina', 'São Paulo', 'Sergipe', 'Tocantins'
      ]
    },
    'Argentina': { flag: '🇦🇷', continent: 'South America', states: [] },
    'Chile': { flag: '��', continent: 'South America', states: [] },
    'Colombia': { flag: '🇨🇴', continent: 'South America', states: [] },
    'Peru': { flag: '🇵🇪', continent: 'South America', states: [] },
    'Venezuela': { flag: '🇻🇪', continent: 'South America', states: [] },
    'Ecuador': { flag: '🇪🇨', continent: 'South America', states: [] },
    'Uruguay': { flag: '🇺🇾', continent: 'South America', states: [] },
    'Paraguay': { flag: '🇵🇾', continent: 'South America', states: [] },
    'Bolivia': { flag: '🇧🇴', continent: 'South America', states: [] },
    'Guyana': { flag: '🇬🇾', continent: 'South America', states: [] },
    'Suriname': { flag: '🇸🇷', continent: 'South America', states: [] },

    // Europe
    'United Kingdom': {
      flag: '🇬🇧',
      continent: 'Europe',
      states: ['England', 'Scotland', 'Wales', 'Northern Ireland']
    },
    'Germany': { flag: '🇩🇪', continent: 'Europe', states: [] },
    'France': { flag: '🇫🇷', continent: 'Europe', states: [] },
    'Italy': { flag: '🇮🇹', continent: 'Europe', states: [] },
    'Spain': { flag: '🇪🇸', continent: 'Europe', states: [] },
    'Netherlands': { flag: '🇳🇱', continent: 'Europe', states: [] },
    'Belgium': { flag: '🇧🇪', continent: 'Europe', states: [] },
    'Switzerland': { flag: '🇨🇭', continent: 'Europe', states: [] },
    'Austria': { flag: '🇦🇹', continent: 'Europe', states: [] },
    'Poland': { flag: '🇵🇱', continent: 'Europe', states: [] },
    'Sweden': { flag: '🇸🇪', continent: 'Europe', states: [] },
    'Norway': { flag: '🇳🇴', continent: 'Europe', states: [] },
    'Denmark': { flag: '🇩🇰', continent: 'Europe', states: [] },
    'Finland': { flag: '🇫🇮', continent: 'Europe', states: [] },
    'Ireland': { flag: '🇮🇪', continent: 'Europe', states: [] },
    'Portugal': { flag: '🇵🇹', continent: 'Europe', states: [] },
    'Greece': { flag: '🇬🇷', continent: 'Europe', states: [] },
    'Czech Republic': { flag: '🇨🇿', continent: 'Europe', states: [] },
    'Hungary': { flag: '🇭🇺', continent: 'Europe', states: [] },
    'Romania': { flag: '🇷🇴', continent: 'Europe', states: [] },
    'Bulgaria': { flag: '🇧🇬', continent: 'Europe', states: [] },
    'Croatia': { flag: '🇭🇷', continent: 'Europe', states: [] },
    'Slovenia': { flag: '🇸🇮', continent: 'Europe', states: [] },
    'Slovakia': { flag: '🇸🇰', continent: 'Europe', states: [] },
    'Estonia': { flag: '🇪🇪', continent: 'Europe', states: [] },
    'Latvia': { flag: '🇱🇻', continent: 'Europe', states: [] },
    'Lithuania': { flag: '🇱🇹', continent: 'Europe', states: [] },

    // Asia
    'India': {
      flag: '🇮🇳',
      continent: 'Asia',
      states: [
        'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
        'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir',
        'Jharkhand', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra',
        'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha',
        'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana',
        'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal', 'Chandigarh',
        'Delhi', 'Lakshadweep', 'Puducherry', 'Andaman and Nicobar Islands',
        'Dadra and Nagar Haveli', 'Daman and Diu', 'Ladakh'
      ]
    },
    'China': { flag: '🇨🇳', continent: 'Asia', states: [] },
    'Japan': { flag: '🇯🇵', continent: 'Asia', states: [] },
    'South Korea': { flag: '🇰🇷', continent: 'Asia', states: [] },
    'Thailand': { flag: '🇹🇭', continent: 'Asia', states: [] },
    'Vietnam': { flag: '🇻🇳', continent: 'Asia', states: [] },
    'Singapore': { flag: '🇸🇬', continent: 'Asia', states: [] },
    'Malaysia': { flag: '🇲🇾', continent: 'Asia', states: [] },
    'Indonesia': { flag: '🇮🇩', continent: 'Asia', states: [] },
    'Philippines': { flag: '🇵🇭', continent: 'Asia', states: [] },
    'Bangladesh': { flag: '🇧🇩', continent: 'Asia', states: [] },
    'Pakistan': { flag: '🇵🇰', continent: 'Asia', states: [] },
    'Sri Lanka': { flag: '🇱🇰', continent: 'Asia', states: [] },
    'Nepal': { flag: '🇳🇵', continent: 'Asia', states: [] },
    'Myanmar': { flag: '🇲🇲', continent: 'Asia', states: [] },
    'Cambodia': { flag: '🇰🇭', continent: 'Asia', states: [] },
    'Laos': { flag: '�🇦', continent: 'Asia', states: [] },
    'Mongolia': { flag: '🇲🇳', continent: 'Asia', states: [] },

    // Middle East
    'United Arab Emirates': { flag: '🇦🇪', continent: 'Middle East', states: [] },
    'Saudi Arabia': { flag: '🇸🇦', continent: 'Middle East', states: [] },
    'Qatar': { flag: '🇶🇦', continent: 'Middle East', states: [] },
    'Kuwait': { flag: '🇰🇼', continent: 'Middle East', states: [] },
    'Bahrain': { flag: '🇧🇭', continent: 'Middle East', states: [] },
    'Oman': { flag: '🇴🇲', continent: 'Middle East', states: [] },
    'Jordan': { flag: '🇯🇴', continent: 'Middle East', states: [] },
    'Lebanon': { flag: '🇱🇧', continent: 'Middle East', states: [] },
    'Israel': { flag: '🇮🇱', continent: 'Middle East', states: [] },
    'Turkey': { flag: '🇹🇷', continent: 'Middle East', states: [] },
    'Iran': { flag: '🇮🇷', continent: 'Middle East', states: [] },
    'Iraq': { flag: '🇮🇶', continent: 'Middle East', states: [] },

    // Africa
    'South Africa': { flag: '🇿🇦', continent: 'Africa', states: [] },
    'Nigeria': { flag: '🇳🇬', continent: 'Africa', states: [] },
    'Egypt': { flag: '🇪🇬', continent: 'Africa', states: [] },
    'Morocco': { flag: '🇲🇦', continent: 'Africa', states: [] },
    'Kenya': { flag: '🇰🇪', continent: 'Africa', states: [] },
    'Ghana': { flag: '🇬🇭', continent: 'Africa', states: [] },
    'Ethiopia': { flag: '🇪🇹', continent: 'Africa', states: [] },
    'Tunisia': { flag: '🇹🇳', continent: 'Africa', states: [] },
    'Algeria': { flag: '🇩🇿', continent: 'Africa', states: [] },
    'Tanzania': { flag: '🇹🇿', continent: 'Africa', states: [] },
    'Uganda': { flag: '🇺🇬', continent: 'Africa', states: [] },
    'Zimbabwe': { flag: '🇿🇼', continent: 'Africa', states: [] },

    // Oceania
    'Australia': {
      flag: '🇦🇺',
      continent: 'Oceania',
      states: [
        'New South Wales', 'Victoria', 'Queensland', 'Western Australia',
        'South Australia', 'Tasmania', 'Northern Territory',
        'Australian Capital Territory'
      ]
    },
    'New Zealand': { flag: '🇳🇿', continent: 'Oceania', states: [] },
    'Fiji': { flag: '��', continent: 'Oceania', states: [] },
    'Papua New Guinea': { flag: '🇵🇬', continent: 'Oceania', states: [] },
  // Handle saving section data
  const handleSaveSection = async (sectionData: Partial<typeof formData>) => {
    setSaving(true)
    try {
      // Simulate save - replace with actual API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast({
        title: "Settings saved",
        description: "Section settings have been successfully updated.",
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save settings. Please try again.",
        variant: "destructive",
      })
    } finally {
      setSaving(false)
    }
  }

  if (loading) {
    return (
      <div className="flex flex-col h-full w-full overflow-hidden">
        <PageHeader 
          title="Settings" 
          subtitle="Manage your store configuration and preferences"
        />
        <main className="flex-1 overflow-auto bg-gray-50 dark:bg-gray-900">
          <div className="p-4 lg:p-6 xl:p-8">
            <div className="text-center">Loading settings...</div>
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="flex flex-col h-full w-full overflow-hidden">
      <PageHeader 
        title="Settings" 
        subtitle="Manage your store configuration and preferences"
        showSearch={true}
        showFilters={true}
      />

      <main className="flex-1 overflow-auto bg-gray-50 dark:bg-gray-900">
        <div className="p-4 lg:p-6 xl:p-8 space-y-6 lg:space-y-8">
          
          <Tabs defaultValue="general" className="space-y-6">
            <TabsList className="grid w-full grid-cols-2 lg:grid-cols-7">
              <TabsTrigger value="general" className="flex items-center gap-2">
                <Store className="h-4 w-4" />
                <span className="hidden sm:block">General</span>
              </TabsTrigger>
              <TabsTrigger value="payments" className="flex items-center gap-2">
                <CreditCard className="h-4 w-4" />
                <span className="hidden sm:block">Payments</span>
              </TabsTrigger>
              <TabsTrigger value="notifications" className="flex items-center gap-2">
                <Bell className="h-4 w-4" />
                <span className="hidden sm:block">Notifications</span>
              </TabsTrigger>
              <TabsTrigger value="security" className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                <span className="hidden sm:block">Security</span>
              </TabsTrigger>
              <TabsTrigger value="appearance" className="flex items-center gap-2">
                <Palette className="h-4 w-4" />
                <span className="hidden sm:block">Appearance</span>
              </TabsTrigger>
              <TabsTrigger value="shipping" className="flex items-center gap-2">
                <Truck className="h-4 w-4" />
                <span className="hidden sm:block">Shipping</span>
              </TabsTrigger>
              <TabsTrigger value="ai" className="flex items-center gap-2">
                <Settings className="h-4 w-4" />
                <span className="hidden sm:block">AI</span>
              </TabsTrigger>
            </TabsList>

            {/* General Settings */}
            <TabsContent value="general" className="space-y-6">
              <div className="grid gap-6 lg:grid-cols-2">
                
                {/* Store Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Store className="h-5 w-5" />
                      Store Information
                    </CardTitle>
                    <CardDescription>
                      Basic information about your store
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="store-name">Store Name</Label>
                      <Input 
                        id="store-name" 
                        value={formData.storeName}
                        onChange={(e) => updateFormData('storeName', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="store-description">Description</Label>
                      <Textarea 
                        id="store-description" 
                        value={formData.storeDescription}
                        onChange={(e) => updateFormData('storeDescription', e.target.value)}
                        rows={3}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="store-email">Contact Email</Label>
                      <Input 
                        id="store-email" 
                        type="email" 
                        value={formData.storeEmail}
                        onChange={(e) => updateFormData('storeEmail', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="store-phone">Phone Number</Label>
                      <Input 
                        id="store-phone" 
                        value={formData.storePhone}
                        onChange={(e) => updateFormData('storePhone', e.target.value)}
                      />
                    </div>
                    <Button 
                      onClick={() => handleSaveSection({
                        storeName: formData.storeName,
                        storeDescription: formData.storeDescription,
                        storeEmail: formData.storeEmail,
                        storePhone: formData.storePhone
                      })}
                      disabled={saving}
                      size="sm"
                      className="w-full"
                    >
                      <Save className="h-4 w-4 mr-2" />
                      Save Store Info
                    </Button>
                  </CardContent>
                </Card>

                {/* Store Logo */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Camera className="h-5 w-5" />
                      Store Logo
                    </CardTitle>
                    <CardDescription>
                      Upload your store logo (recommended size: 200x200px)
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-center w-32 h-32 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                      <div className="text-center">
                        <Camera className="h-8 w-8 mx-auto text-gray-400" />
                        <p className="text-sm text-gray-500 mt-2">Current Logo</p>
                      </div>
                    </div>
                    <Button variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload New Logo
                    </Button>
                  </CardContent>
                </Card>

                {/* Business Address */}
                <Card className="lg:col-span-2">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Globe className="h-5 w-5" />
                      Business Address
                    </CardTitle>
                    <CardDescription>
                      Your business address for legal and shipping purposes
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="grid gap-4 lg:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="address-line1">Address Line 1</Label>
                      <Input 
                        id="address-line1" 
                        value={formData.addressLine1}
                        onChange={(e) => updateFormData('addressLine1', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="address-line2">Address Line 2</Label>
                      <Input 
                        id="address-line2" 
                        value={formData.addressLine2}
                        onChange={(e) => updateFormData('addressLine2', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="city">City</Label>
                      <Input 
                        id="city" 
                        value={formData.city}
                        onChange={(e) => updateFormData('city', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="state">State/Province</Label>
                      <Input 
                        id="state" 
                        value={formData.state}
                        onChange={(e) => updateFormData('state', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="zip">ZIP/Postal Code</Label>
                      <Input 
                        id="zip" 
                        value={formData.zip}
                        onChange={(e) => updateFormData('zip', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="country">Country</Label>
                      <Select value={formData.country} onValueChange={(value) => updateFormData('country', value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="us">United States</SelectItem>
                          <SelectItem value="ca">Canada</SelectItem>
                          <SelectItem value="uk">United Kingdom</SelectItem>
                          <SelectItem value="au">Australia</SelectItem>
                          <SelectItem value="in">India</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="lg:col-span-2">
                      <Button 
                        onClick={() => handleSaveSection({
                          addressLine1: formData.addressLine1,
                          addressLine2: formData.addressLine2,
                          city: formData.city,
                          state: formData.state,
                          zip: formData.zip,
                          country: formData.country
                        })}
                        disabled={saving}
                        size="sm"
                        className="w-full"
                      >
                        <Save className="h-4 w-4 mr-2" />
                        Save Address
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Payment Settings */}
            <TabsContent value="payments" className="space-y-6">
              <div className="grid gap-6 lg:grid-cols-2">
                
                {/* Payment Methods */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <CreditCard className="h-5 w-5" />
                      Payment Methods
                    </CardTitle>
                    <CardDescription>
                      Configure accepted payment methods
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Credit Cards</Label>
                        <p className="text-sm text-gray-500">Accept Visa, Mastercard, AMEX</p>
                      </div>
                      <Switch 
                        checked={formData.acceptCreditCards} 
                        onCheckedChange={(checked) => updateFormData('acceptCreditCards', checked)}
                      />
                    </div>
                    <Separator />
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>PayPal</Label>
                        <p className="text-sm text-gray-500">Accept PayPal payments</p>
                      </div>
                      <Switch 
                        checked={formData.acceptPaypal} 
                        onCheckedChange={(checked) => updateFormData('acceptPaypal', checked)}
                      />
                    </div>
                    <Separator />
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Apple Pay</Label>
                        <p className="text-sm text-gray-500">Accept Apple Pay</p>
                      </div>
                      <Switch 
                        checked={formData.acceptApplePay} 
                        onCheckedChange={(checked) => updateFormData('acceptApplePay', checked)}
                      />
                    </div>
                    <Separator />
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Google Pay</Label>
                        <p className="text-sm text-gray-500">Accept Google Pay</p>
                      </div>
                      <Switch 
                        checked={formData.acceptGooglePay} 
                        onCheckedChange={(checked) => updateFormData('acceptGooglePay', checked)}
                      />
                    </div>
                    <Button 
                      onClick={() => handleSaveSection({
                        acceptCreditCards: formData.acceptCreditCards,
                        acceptPaypal: formData.acceptPaypal,
                        acceptApplePay: formData.acceptApplePay,
                        acceptGooglePay: formData.acceptGooglePay
                      })}
                      disabled={saving}
                      size="sm"
                      className="w-full"
                    >
                      <Save className="h-4 w-4 mr-2" />
                      Save Payment Methods
                    </Button>
                  </CardContent>
                </Card>

                {/* Currency Settings */}
                <Card>
                  <CardHeader>
                    <CardTitle>Currency Settings</CardTitle>
                    <CardDescription>
                      Set your store's primary currency
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="currency">Primary Currency</Label>
                      <Select value={formData.currency} onValueChange={(value) => updateFormData('currency', value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {currencyOptions.map((c) => (
                            <SelectItem key={c.code} value={c.code}>
                              {c.code} - {c.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Multi-currency Support</Label>
                        <p className="text-sm text-gray-500">Allow customers to view prices in their local currency</p>
                      </div>
                      <Switch 
                        checked={formData.multiCurrencySupport} 
                        onCheckedChange={(checked) => updateFormData('multiCurrencySupport', checked)}
                      />
                    </div>
                    <div className="flex justify-end">
                      <Button 
                        size="sm" 
                        onClick={() => handleSaveSection({
                          currency: formData.currency,
                          multiCurrencySupport: formData.multiCurrencySupport
                        })} 
                        disabled={saving}
                        className="bg-blue-600 hover:bg-blue-700 text-white"
                      >
                        <Save className="h-4 w-4 mr-2" />
                        Save Currency Settings
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Notifications */}
            <TabsContent value="notifications" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bell className="h-5 w-5" />
                    Notification Preferences
                  </CardTitle>
                  <CardDescription>
                    Configure when and how you receive notifications
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>New Orders</Label>
                      <p className="text-sm text-gray-500">Get notified when new orders are placed</p>
                    </div>
                    <Switch 
                      checked={formData.notifyNewOrders} 
                      onCheckedChange={(checked) => updateFormData('notifyNewOrders', checked)}
                    />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Low Stock Alerts</Label>
                      <p className="text-sm text-gray-500">Get notified when products are running low</p>
                    </div>
                    <Switch 
                      checked={formData.notifyLowStock} 
                      onCheckedChange={(checked) => updateFormData('notifyLowStock', checked)}
                    />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Customer Messages</Label>
                      <p className="text-sm text-gray-500">Get notified of customer inquiries</p>
                    </div>
                    <Switch 
                      checked={formData.notifyCustomerMessages} 
                      onCheckedChange={(checked) => updateFormData('notifyCustomerMessages', checked)}
                    />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Marketing Updates</Label>
                      <p className="text-sm text-gray-500">Receive marketing tips and updates</p>
                    </div>
                    <Switch 
                      checked={formData.notifyMarketingUpdates} 
                      onCheckedChange={(checked) => updateFormData('notifyMarketingUpdates', checked)}
                    />
                  </div>
                  <Button 
                    onClick={() => handleSaveSection({
                      notifyNewOrders: formData.notifyNewOrders,
                      notifyLowStock: formData.notifyLowStock,
                      notifyCustomerMessages: formData.notifyCustomerMessages,
                      notifyMarketingUpdates: formData.notifyMarketingUpdates
                    })}
                    disabled={saving}
                    size="sm"
                    className="w-full"
                  >
                    <Save className="h-4 w-4 mr-2" />
                    Save Notification Settings
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Security */}
            <TabsContent value="security" className="space-y-6">
              <div className="grid gap-6 lg:grid-cols-2">
                
                {/* Password Settings */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Key className="h-5 w-5" />
                      Password Settings
                    </CardTitle>
                    <CardDescription>
                      Manage your account password and security
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="current-password">Current Password</Label>
                      <Input id="current-password" type="password" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="new-password">New Password</Label>
                      <Input id="new-password" type="password" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="confirm-password">Confirm New Password</Label>
                      <Input id="confirm-password" type="password" />
                    </div>
                    <Button className="w-full">Update Password</Button>
                  </CardContent>
                </Card>

                {/* Security Settings */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5" />
                      Security Settings
                    </CardTitle>
                    <CardDescription>
                      Additional security options
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Two-Factor Authentication</Label>
                        <p className="text-sm text-gray-500">Add an extra layer of security</p>
                      </div>
                      <Switch 
                        checked={formData.twoFactorAuth} 
                        onCheckedChange={(checked) => updateFormData('twoFactorAuth', checked)}
                      />
                    </div>
                    <Separator />
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Login Notifications</Label>
                        <p className="text-sm text-gray-500">Get notified of new login attempts</p>
                      </div>
                      <Switch 
                        checked={formData.loginNotifications} 
                        onCheckedChange={(checked) => updateFormData('loginNotifications', checked)}
                      />
                    </div>
                    <Separator />
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Session Timeout</Label>
                        <p className="text-sm text-gray-500">Auto-logout after inactivity</p>
                      </div>
                      <Select value={formData.sessionTimeout.toString()} onValueChange={(value) => updateFormData('sessionTimeout', parseInt(value))}>
                        <SelectTrigger className="w-24">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="15">15m</SelectItem>
                          <SelectItem value="30">30m</SelectItem>
                          <SelectItem value="60">1h</SelectItem>
                          <SelectItem value="120">2h</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <Button 
                      onClick={() => handleSaveSection({
                        twoFactorAuth: formData.twoFactorAuth,
                        loginNotifications: formData.loginNotifications,
                        sessionTimeout: formData.sessionTimeout
                      })}
                      disabled={saving}
                      size="sm"
                      className="w-full"
                    >
                      <Save className="h-4 w-4 mr-2" />
                      Save Security Settings
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Appearance */}
            <TabsContent value="appearance" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Palette className="h-5 w-5" />
                    Theme & Appearance
                  </CardTitle>
                  <CardDescription>
                    Customize the look and feel of your admin panel
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Theme</Label>
                    <Select value={formData.theme} onValueChange={(value) => updateFormData('theme', value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="light">Light</SelectItem>
                        <SelectItem value="dark">Dark</SelectItem>
                        <SelectItem value="system">System</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Sidebar Auto-collapse</Label>
                      <p className="text-sm text-gray-500">Automatically collapse sidebar on smaller screens</p>
                    </div>
                    <Switch 
                      checked={formData.sidebarAutoCollapse} 
                      onCheckedChange={(checked) => updateFormData('sidebarAutoCollapse', checked)}
                    />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Compact Mode</Label>
                      <p className="text-sm text-gray-500">Use compact spacing throughout the interface</p>
                    </div>
                    <Switch 
                      checked={formData.compactMode} 
                      onCheckedChange={(checked) => updateFormData('compactMode', checked)}
                    />
                  </div>
                  <Button 
                    onClick={() => handleSaveSection({
                      theme: formData.theme,
                      sidebarAutoCollapse: formData.sidebarAutoCollapse,
                      compactMode: formData.compactMode
                    })}
                    disabled={saving}
                    size="sm"
                    className="w-full"
                  >
                    <Save className="h-4 w-4 mr-2" />
                    Save Appearance Settings
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Shipping */}
            <TabsContent value="shipping" className="space-y-6">
              <div className="grid gap-6">
                
                {/* Create Custom Shipping Zone */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Globe className="h-5 w-5" />
                      Custom Shipping Zones
                    </CardTitle>
                    <CardDescription>
                      Create custom shipping zones with state-specific rates for different locations
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center hover:border-gray-400 dark:hover:border-gray-500 transition-colors">
                      <Globe className="h-12 w-12 mx-auto text-gray-400 mb-4" />
                      <h4 className="font-medium text-gray-900 dark:text-white mb-2">Create Custom Shipping Zone</h4>
                      <p className="text-sm text-gray-500 mb-6">
                        Add a new shipping zone for specific countries or regions.<br />
                        <span className="text-xs text-gray-400">Configure custom state-wise shipping rates with full control.</span>
                      </p>
                      <Button 
                        variant="outline" 
                        className="bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
                        onClick={handleCreateZone}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Create Custom Zone
                      </Button>
                    </div>
                  </CardContent>
                </Card>

              </div>
            </TabsContent>

            {/* AI Settings */}
            <TabsContent value="ai" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>AI & Experimental</CardTitle>
                  <CardDescription>Control access to advanced AI preview features.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="flex items-start justify-between gap-4">
                    <div className="space-y-1">
                      <p className="font-medium">Enable GPT-5 (Preview) for all clients</p>
                      <p className="text-sm text-muted-foreground max-w-md">Turns on experimental GPT-5 powered capabilities across the storefront and admin surfaces. This may increase token usage and should only be enabled if your billing plan allows it.</p>
                    </div>
                    <Switch 
                      checked={formData.gpt5PreviewEnabled} 
                      onCheckedChange={(checked) => updateFormData('gpt5PreviewEnabled', checked)}
                    />
                  </div>
                  <div>
                    <Button 
                      size="sm" 
                      onClick={() => handleSaveSection({
                        gpt5PreviewEnabled: formData.gpt5PreviewEnabled
                      })}
                      disabled={saving}
                    >
                      Save AI Settings
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>

      {/* Delete Confirmation Dialog */}
      {showDeleteDialog.show && showDeleteDialog.zone && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <div className="text-red-600 dark:text-red-400">
                <AlertTriangle className="h-6 w-6" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Delete Shipping Zone
              </h3>
            </div>
            
            <div className="mb-6">
              <p className="text-gray-600 dark:text-gray-300 mb-3">
                Are you sure you want to delete the <strong>"{showDeleteDialog.zone.name}"</strong> shipping zone?
              </p>
              
              <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3">
                <div className="flex items-start gap-2">
                  <div className="text-red-600 dark:text-red-400 mt-0.5">
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 14.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                  </div>
                  <div>
                    <p className="text-sm text-red-800 dark:text-red-200 font-medium">
                      This action cannot be undone
                    </p>
                    <ul className="text-xs text-red-700 dark:text-red-300 mt-1 space-y-1">
                      <li>• All shipping rates will be removed</li>
                      <li>• Custom state configurations will be lost</li>
                      <li>• Customers in this zone will use default rates</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button 
                variant="outline" 
                onClick={() => setShowDeleteDialog({show: false, zone: null})}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button 
                variant="destructive" 
                onClick={confirmDeleteZone}
                disabled={deletingZone === showDeleteDialog.zone?.id}
                className="flex-1 bg-red-600 hover:bg-red-700"
              >
                {deletingZone === showDeleteDialog.zone?.id ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                    Deleting...
                  </>
                ) : (
                  <>
                    <Trash2 className="h-4 w-4 mr-2" />
                    Delete Zone
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Create Zone Modal - Professional UI */}
      {showCreateZoneModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4" style={{background: 'rgba(15,23,42,0.6)'}}>
          <div className="bg-white dark:bg-gray-900 rounded-2xl w-full max-w-4xl shadow-2xl max-h-[95vh] flex flex-col border border-gray-200 dark:border-gray-700">
            
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-t-2xl">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-xl">
                  <Globe className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white">
                    Create Shipping Zone
                  </h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    Set up custom shipping rates for specific regions
                  </p>
                </div>
              </div>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => setShowCreateZoneModal(false)}
                className="rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <X className="h-5 w-5" />
              </Button>
            </div>
            
            <div className="flex-1 min-h-0 overflow-hidden">
              <div className="grid grid-cols-1 lg:grid-cols-3 h-full">
                
                {/* Left Panel - Zone Type Selection */}
                <div className="p-6 border-r border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
                  <div className="space-y-6">
                    
                    {/* Zone Type Selector */}
                    <div>
                      <Label className="text-lg font-semibold mb-4 block text-gray-900 dark:text-white">
                        Choose Zone Type
                      </Label>
                      <div className="space-y-3">
                        
                        {/* Quick Domestic Zone */}
                        <button
                          onClick={() => handleQuickZoneCreate('domestic')}
                          className="w-full p-4 rounded-xl border-2 border-dashed border-gray-300 dark:border-gray-600 hover:border-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 transition-all group"
                        >
                          <div className="flex items-center gap-3">
                            <div className="text-3xl">🏠</div>
                            <div className="text-left flex-1">
                              <div className="font-semibold text-gray-900 dark:text-white group-hover:text-green-700 dark:group-hover:text-green-400">
                                Domestic Shipping
                              </div>
                              <div className="text-sm text-gray-500 dark:text-gray-400">
                                Auto-detected for {location?.country || 'your location'}
                              </div>
                              <div className="text-xs text-green-600 dark:text-green-400 mt-1 font-medium">
                                ${formData.domesticShippingRate.toFixed(2)} • {location?.country ? `${location.country} 🇺🇸` : 'IP-based'}
                              </div>
                            </div>
                          </div>
                        </button>
                        
                        {/* Quick International Zone */}
                        <button
                          onClick={() => handleQuickZoneCreate('international')}
                          className="w-full p-4 rounded-xl border-2 border-dashed border-gray-300 dark:border-gray-600 hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-all group"
                        >
                          <div className="flex items-center gap-3">
                            <div className="text-3xl">🌍</div>
                            <div className="text-left flex-1">
                              <div className="font-semibold text-gray-900 dark:text-white group-hover:text-blue-700 dark:group-hover:text-blue-400">
                                International Shipping
                              </div>
                              <div className="text-sm text-gray-500 dark:text-gray-400">
                                Global delivery (excluding domestic)
                              </div>
                              <div className="text-xs text-blue-600 dark:text-blue-400 mt-1 font-medium">
                                ${formData.internationalShippingRate.toFixed(2)} • Worldwide 🌍
                              </div>
                            </div>
                          </div>
                        </button>
                        
                        {/* Custom Zone */}
                        <button
                          onClick={() => setZoneType('custom')}
                          className={`w-full p-4 rounded-xl border-2 transition-all ${
                            zoneType === 'custom' 
                              ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20' 
                              : 'border-gray-300 dark:border-gray-600 hover:border-purple-400 hover:bg-purple-50 dark:hover:bg-purple-900/20'
                          }`}
                        >
                          <div className="flex items-center gap-3">
                            <div className="text-3xl">🎯</div>
                            <div className="text-left">
                              <div className={`font-semibold ${
                                zoneType === 'custom' 
                                  ? 'text-purple-700 dark:text-purple-400' 
                                  : 'text-gray-900 dark:text-white'
                              }`}>
                                Custom Zone
                              </div>
                              <div className="text-sm text-gray-500 dark:text-gray-400">
                                State-specific rates & countries
                              </div>
                            </div>
                          </div>
                        </button>
                      </div>
                    </div>

                    {/* Zone Name for Custom */}
                    {zoneType === 'custom' && (
                      <div className="space-y-3">
                        <Label htmlFor="zone-name" className="text-base font-semibold text-gray-900 dark:text-white">
                          Zone Name
                        </Label>
                        <Input 
                          id="zone-name"
                          value={zoneName}
                          onChange={(e) => setZoneName(e.target.value)}
                          placeholder="e.g., Europe Express Zone"
                          className="text-base rounded-xl border-gray-300 dark:border-gray-600"
                        />
                      </div>
                    )}
                  </div>
                </div>

                {/* Right Panel - Country Selection (Only for Custom) */}
                {zoneType === 'custom' && (
                  <div className="lg:col-span-2 flex flex-col">
                    
                    {/* Search and Filter Bar */}
                    <div className="p-6 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
                      <div className="space-y-4">
                        
                        {/* Search Bar */}
                        <div className="relative">
                          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                          <Input
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            placeholder="Search countries..."
                            className="pl-10 pr-4 py-3 text-base rounded-xl border-gray-300 dark:border-gray-600"
                          />
                        </div>
                        
                        {/* Continent Filter */}
                        <div className="flex flex-wrap gap-2">
                          {continents.map((continent) => (
                            <Button
                              key={continent}
                              variant={selectedContinent === continent ? "default" : "outline"}
                              size="sm"
                              onClick={() => setSelectedContinent(continent)}
                              className={`rounded-lg text-xs ${
                                selectedContinent === continent
                                  ? 'bg-blue-600 text-white hover:bg-blue-700'
                                  : 'hover:bg-gray-100 dark:hover:bg-gray-700'
                              }`}
                            >
                              {continent === 'all' ? '� All' : 
                               continent === 'North America' ? '�� North America' :
                               continent === 'South America' ? '�� South America' :
                               continent === 'Europe' ? '🇪🇺 Europe' :
                               continent === 'Asia' ? '�� Asia' :
                               continent === 'Middle East' ? '�️ Middle East' :
                               continent === 'Africa' ? '🌍 Africa' :
                               continent === 'Oceania' ? '🇦� Oceania' : continent}
                            </Button>
                          ))}
                        </div>
                      </div>
                    </div>

                    {/* Countries Grid */}
                    <div className="flex-1 p-6 overflow-y-auto">
                      {selectedContinent === 'all' ? (
                        // Show all countries grouped by continent
                        <div className="space-y-8">
                          {Object.entries(countriesByContinent).map(([continent, countries]) => (
                            countries.length > 0 && (
                              <div key={continent}>
                                <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                                  <span className="text-2xl">
                                    {continent === 'North America' ? '��' :
                                     continent === 'South America' ? '��' :
                                     continent === 'Europe' ? '🇪🇺' :
                                     continent === 'Asia' ? '��' :
                                     continent === 'Middle East' ? '🏛️' :
                                     continent === 'Africa' ? '�' :
                                     continent === 'Oceania' ? '🇦🇺' : '�'}
                                  </span>
                                  {continent}
                                </h4>
                                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                                  {countries.map(([country, data]) => (
                                    <button
                                      key={country}
                                      onClick={() => handleCountrySelect(country)}
                                      className={`p-4 rounded-xl border-2 transition-all text-center hover:scale-105 ${
                                        selectedCountry === country
                                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                                          : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500 hover:shadow-md'
                                      }`}
                                    >
                                      <div className="text-3xl mb-2">{data.flag}</div>
                                      <div className="text-sm font-medium text-gray-900 dark:text-white leading-tight">
                                        {country}
                                      </div>
                                    </button>
                                  ))}
                                </div>
                              </div>
                            )
                          ))}
                        </div>
                      ) : (
                        // Show filtered countries
                        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                          {filteredCountries.map(([country, data]) => (
                            <button
                              key={country}
                              onClick={() => handleCountrySelect(country)}
                              className={`p-4 rounded-xl border-2 transition-all text-center hover:scale-105 ${
                                selectedCountry === country
                                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                                  : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500 hover:shadow-md'
                              }`}
                            >
                              <div className="text-3xl mb-2">{data.flag}</div>
                              <div className="text-sm font-medium text-gray-900 dark:text-white leading-tight">
                                {country}
                              </div>
                            </button>
                          ))}
                        </div>
                      )}

                      {/* No Results */}
                      {filteredCountries.length === 0 && searchQuery && (
                        <div className="text-center py-12">
                          <div className="text-4xl mb-4">🔍</div>
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                            No countries found
                          </h3>
                          <p className="text-gray-500 dark:text-gray-400">
                            Try adjusting your search or continent filter
                          </p>
                        </div>
                      )}
                    </div>

                    {/* State Selection (if country selected and has states) */}
                    {selectedCountry && countryStateData[selectedCountry] && countryStateData[selectedCountry]?.states?.length > 0 && (
                      <div className="border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
                        <div className="p-6 space-y-6">
                          
                          {/* Header */}
                          <div className="flex items-center justify-between">
                            <Label className="text-base font-semibold text-gray-900 dark:text-white">
                              States/Provinces for {selectedCountry} {countryStateData[selectedCountry]?.flag}
                            </Label>
                            <div className="flex gap-2">
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => {
                                  const stateData: {[key: string]: {selected: boolean, rate: number, type: 'fixed' | 'free'}} = {}
                                  countryStateData[selectedCountry]?.states?.forEach((state: string) => {
                                    stateData[state] = { 
                                      selected: true, 
                                      rate: rateMode === 'uniform' ? uniformRate : 10.00, 
                                      type: rateMode === 'uniform' ? uniformType : 'fixed' 
                                    }
                                  })
                                  setSelectedStates(stateData)
                                }}
                                className="text-xs rounded-lg"
                              >
                                Select All
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => {
                                  const stateData: {[key: string]: {selected: boolean, rate: number, type: 'fixed' | 'free'}} = {}
                                  countryStateData[selectedCountry]?.states?.forEach((state: string) => {
                                    stateData[state] = { selected: false, rate: 10.00, type: 'fixed' }
                                  })
                                  setSelectedStates(stateData)
                                }}
                                className="text-xs rounded-lg"
                              >
                                Clear All
                              </Button>
                            </div>
                          </div>

                          {/* Rate Mode Selection */}
                          <div className="space-y-4">
                            <Label className="text-sm font-medium text-gray-900 dark:text-white">
                              Shipping Rate Configuration
                            </Label>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              {/* Uniform Rate Option */}
                              <div 
                                onClick={() => handleRateModeChange('uniform')}
                                className={`p-4 rounded-xl border-2 cursor-pointer transition-all ${
                                  rateMode === 'uniform' 
                                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                                    : 'border-gray-200 dark:border-gray-600 hover:border-blue-300'
                                }`}
                              >
                                <div className="flex items-center gap-3">
                                  <div className={`w-4 h-4 rounded-full border-2 ${
                                    rateMode === 'uniform' 
                                      ? 'border-blue-500 bg-blue-500' 
                                      : 'border-gray-300'
                                  }`}>
                                    {rateMode === 'uniform' && (
                                      <div className="w-2 h-2 bg-white rounded-full m-0.5"></div>
                                    )}
                                  </div>
                                  <div>
                                    <div className="font-semibold text-gray-900 dark:text-white">
                                      Same Rate for All States
                                    </div>
                                    <div className="text-sm text-gray-500 dark:text-gray-400">
                                      One shipping rate applies to all selected states
                                    </div>
                                  </div>
                                </div>
                                
                                {rateMode === 'uniform' && (
                                  <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
                                    <div className="flex items-center gap-4">
                                      <div className="flex items-center gap-2">
                                        <input
                                          type="radio"
                                          name="uniform-type"
                                          checked={uniformType === 'fixed'}
                                          onChange={() => handleUniformTypeChange('fixed')}
                                          className="text-blue-600"
                                        />
                                        <span className="text-sm">Fixed Rate</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <input
                                          type="radio"
                                          name="uniform-type"
                                          checked={uniformType === 'free'}
                                          onChange={() => handleUniformTypeChange('free')}
                                          className="text-blue-600"
                                        />
                                        <span className="text-sm">Free Shipping</span>
                                      </div>
                                      
                                      {uniformType === 'fixed' && (
                                        <div className="flex items-center gap-2 ml-auto">
                                          <span className="text-sm">$</span>
                                          <input
                                            type="number"
                                            step="0.01"
                                            value={uniformRate}
                                            onChange={(e) => handleUniformRateChange(parseFloat(e.target.value) || 0)}
                                            className="w-24 px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-lg"
                                          />
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                )}
                              </div>

                              {/* Individual Rate Option */}
                              <div 
                                onClick={() => handleRateModeChange('individual')}
                                className={`p-4 rounded-xl border-2 cursor-pointer transition-all ${
                                  rateMode === 'individual' 
                                    ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20' 
                                    : 'border-gray-200 dark:border-gray-600 hover:border-purple-300'
                                }`}
                              >
                                <div className="flex items-center gap-3">
                                  <div className={`w-4 h-4 rounded-full border-2 ${
                                    rateMode === 'individual' 
                                      ? 'border-purple-500 bg-purple-500' 
                                      : 'border-gray-300'
                                  }`}>
                                    {rateMode === 'individual' && (
                                      <div className="w-2 h-2 bg-white rounded-full m-0.5"></div>
                                    )}
                                  </div>
                                  <div>
                                    <div className="font-semibold text-gray-900 dark:text-white">
                                      Individual State Rates
                                    </div>
                                    <div className="text-sm text-gray-500 dark:text-gray-400">
                                      Set different rates for each state
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* States List */}
                          <div className="grid gap-3 max-h-64 overflow-y-auto">
                            {(countryStateData[selectedCountry]?.states || []).map((state: string) => (
                              <div 
                                key={state}
                                className={`p-4 rounded-xl border-2 transition-all cursor-pointer ${
                                  selectedStates[state]?.selected
                                    ? 'border-green-400 bg-green-50 dark:bg-green-900/20'
                                    : 'border-gray-200 dark:border-gray-600 hover:border-gray-300'
                                }`}
                                onClick={() => handleStateToggle(state)}
                              >
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center gap-3">
                                    <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                                      selectedStates[state]?.selected
                                        ? 'border-green-500 bg-green-500'
                                        : 'border-gray-300'
                                    }`}>
                                      {selectedStates[state]?.selected && (
                                        <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                        </svg>
                                      )}
                                    </div>
                                    <span className="font-medium text-gray-900 dark:text-white">
                                      {state}
                                    </span>
                                  </div>
                                  
                                  {selectedStates[state]?.selected && (
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                      {selectedStates[state]?.type === 'free' 
                                        ? 'Free Shipping' 
                                        : `$${selectedStates[state]?.rate?.toFixed(2)}`
                                      }
                                    </div>
                                  )}
                                </div>
                                
                                {selectedStates[state]?.selected && rateMode === 'individual' && (
                                  <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600" onClick={(e) => e.stopPropagation()}>
                                    <div className="flex items-center gap-3">
                                      <div className="flex items-center gap-2">
                                        <input
                                          type="radio"
                                          name={`${state}-type`}
                                          checked={selectedStates[state]?.type === 'fixed'}
                                          onChange={() => handleStateTypeChange(state, 'fixed')}
                                          className="text-green-600"
                                        />
                                        <span className="text-xs">Fixed Rate</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <input
                                          type="radio"
                                          name={`${state}-type`}
                                          checked={selectedStates[state]?.type === 'free'}
                                          onChange={() => handleStateTypeChange(state, 'free')}
                                          className="text-green-600"
                                        />
                                        <span className="text-xs">Free</span>
                                      </div>
                                      
                                      {selectedStates[state]?.type === 'fixed' && (
                                        <div className="flex items-center gap-2 ml-auto">
                                          <span className="text-xs">$</span>
                                          <input
                                            type="number"
                                            step="0.01"
                                            value={selectedStates[state]?.rate || 10}
                                            onChange={(e) => handleStateRateChange(state, parseFloat(e.target.value) || 0)}
                                            className="w-20 px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded-lg"
                                          />
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Footer */}
                    <div className="flex justify-between items-center p-6 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
                      <div className="text-sm space-y-1">
                        {selectedCountry && (
                          <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <span>Country: {selectedCountry} {countryStateData[selectedCountry]?.flag}</span>
                          </div>
                        )}
                        {selectedCountry && Object.values(selectedStates).filter(s => s?.selected).length > 0 && (
                          <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <span>
                              {Object.values(selectedStates).filter(s => s?.selected).length} state(s) selected
                              {rateMode === 'uniform' && uniformType === 'fixed' && (
                                <span className="ml-2 text-green-600 font-medium">
                                  @ ${uniformRate.toFixed(2)} each
                                </span>
                              )}
                              {rateMode === 'uniform' && uniformType === 'free' && (
                                <span className="ml-2 text-green-600 font-medium">
                                  (Free shipping)
                                </span>
                              )}
                            </span>
                          </div>
                        )}
                      </div>
                      <div className="flex gap-3">
                        <Button 
                          variant="outline" 
                          onClick={() => setShowCreateZoneModal(false)}
                          className="rounded-xl"
                        >
                          Cancel
                        </Button>
                        <Button 
                          onClick={createCustomZone}
                          disabled={!zoneName || !selectedCountry || Object.values(selectedStates).filter(s => s?.selected).length === 0}
                          className="bg-blue-600 hover:bg-blue-700 text-white rounded-xl disabled:opacity-50"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          Create Zone
                        </Button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
