'use client';

import { useEffect, useState } from 'react';
import { useAuth } from '@/components/auth/AuthContext';
import { MobileHeader } from "@/components/admin/mobile-header";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { 
  Save,
  Settings,
  Store,
  Bell,
  CreditCard,
  Shield,
  Mail,
  Globe
} from "lucide-react";

interface StoreSettings {
  storeName: string;
  storeDescription: string;
  storeEmail: string;
  storePhone: string;
  currency: string;
  timezone: string;
  language: string;
}

interface NotificationSettings {
  emailNotifications: boolean;
  orderNotifications: boolean;
  inventoryAlerts: boolean;
  marketingEmails: boolean;
}

interface PaymentSettings {
  razorpayEnabled: boolean;
  razorpayKeyId: string;
  stripeEnabled: boolean;
  codEnabled: boolean;
}

interface SecuritySettings {
  twoFactorEnabled: boolean;
  sessionTimeout: number;
  passwordRequirements: {
    minLength: number;
    requireSpecialChars: boolean;
    requireNumbers: boolean;
  };
}

function SettingsActions() {
  return (
    <div className="flex items-center gap-2 lg:gap-3">
      <Button className="h-10 lg:h-12 px-4 lg:px-6 bg-blue-600 hover:bg-blue-700 text-white">
        <Save className="h-4 w-4 lg:h-5 lg:w-5 mr-2" />
        <span className="text-sm lg:text-base font-medium">Save Changes</span>
      </Button>
    </div>
  );
}

function StoreSettingsTab() {
  const [storeSettings, setStoreSettings] = useState<StoreSettings>({
    storeName: 'HatsEvenourr',
    storeDescription: 'Premium headwear and accessories',
    storeEmail: 'info@hatsevenourr.com',
    storePhone: '+91 9876543210',
    currency: 'INR',
    timezone: 'Asia/Kolkata',
    language: 'en'
  });

  const handleStoreSettingChange = (field: keyof StoreSettings, value: string) => {
    setStoreSettings(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Store className="h-5 w-5" />
            Store Information
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="storeName">Store Name</Label>
              <Input
                id="storeName"
                value={storeSettings.storeName}
                onChange={(e) => handleStoreSettingChange('storeName', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="storeEmail">Store Email</Label>
              <Input
                id="storeEmail"
                type="email"
                value={storeSettings.storeEmail}
                onChange={(e) => handleStoreSettingChange('storeEmail', e.target.value)}
              />
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="storeDescription">Store Description</Label>
            <Input
              id="storeDescription"
              value={storeSettings.storeDescription}
              onChange={(e) => handleStoreSettingChange('storeDescription', e.target.value)}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="storePhone">Phone Number</Label>
              <Input
                id="storePhone"
                value={storeSettings.storePhone}
                onChange={(e) => handleStoreSettingChange('storePhone', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="currency">Currency</Label>
              <Input
                id="currency"
                value={storeSettings.currency}
                onChange={(e) => handleStoreSettingChange('currency', e.target.value)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Globe className="h-5 w-5" />
            Regional Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="timezone">Timezone</Label>
              <Input
                id="timezone"
                value={storeSettings.timezone}
                onChange={(e) => handleStoreSettingChange('timezone', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="language">Language</Label>
              <Input
                id="language"
                value={storeSettings.language}
                onChange={(e) => handleStoreSettingChange('language', e.target.value)}
              />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function NotificationsTab() {
  const [notifications, setNotifications] = useState<NotificationSettings>({
    emailNotifications: true,
    orderNotifications: true,
    inventoryAlerts: true,
    marketingEmails: false
  });

  const handleNotificationChange = (field: keyof NotificationSettings, value: boolean) => {
    setNotifications(prev => ({ ...prev, [field]: value }));
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bell className="h-5 w-5" />
          Notification Preferences
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-0.5">
            <Label htmlFor="emailNotifications">Email Notifications</Label>
            <p className="text-sm text-muted-foreground">Receive general email notifications</p>
          </div>
          <Switch
            id="emailNotifications"
            checked={notifications.emailNotifications}
            onCheckedChange={(checked) => handleNotificationChange('emailNotifications', checked)}
          />
        </div>
        
        <Separator />
        
        <div className="flex items-center justify-between">
          <div className="space-y-0.5">
            <Label htmlFor="orderNotifications">Order Notifications</Label>
            <p className="text-sm text-muted-foreground">Get notified about new orders and updates</p>
          </div>
          <Switch
            id="orderNotifications"
            checked={notifications.orderNotifications}
            onCheckedChange={(checked) => handleNotificationChange('orderNotifications', checked)}
          />
        </div>
        
        <Separator />
        
        <div className="flex items-center justify-between">
          <div className="space-y-0.5">
            <Label htmlFor="inventoryAlerts">Inventory Alerts</Label>
            <p className="text-sm text-muted-foreground">Receive alerts for low stock items</p>
          </div>
          <Switch
            id="inventoryAlerts"
            checked={notifications.inventoryAlerts}
            onCheckedChange={(checked) => handleNotificationChange('inventoryAlerts', checked)}
          />
        </div>
        
        <Separator />
        
        <div className="flex items-center justify-between">
          <div className="space-y-0.5">
            <Label htmlFor="marketingEmails">Marketing Emails</Label>
            <p className="text-sm text-muted-foreground">Receive marketing and promotional emails</p>
          </div>
          <Switch
            id="marketingEmails"
            checked={notifications.marketingEmails}
            onCheckedChange={(checked) => handleNotificationChange('marketingEmails', checked)}
          />
        </div>
      </CardContent>
    </Card>
  );
}

function PaymentTab() {
  const [paymentSettings, setPaymentSettings] = useState<PaymentSettings>({
    razorpayEnabled: true,
    razorpayKeyId: 'rzp_test_****',
    stripeEnabled: false,
    codEnabled: true
  });

  const handlePaymentSettingChange = (field: keyof PaymentSettings, value: boolean | string) => {
    setPaymentSettings(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Payment Methods
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="razorpayEnabled">Razorpay</Label>
              <p className="text-sm text-muted-foreground">Accept payments via Razorpay</p>
            </div>
            <Switch
              id="razorpayEnabled"
              checked={paymentSettings.razorpayEnabled}
              onCheckedChange={(checked) => handlePaymentSettingChange('razorpayEnabled', checked)}
            />
          </div>
          
          {paymentSettings.razorpayEnabled && (
            <div className="space-y-2 ml-4">
              <Label htmlFor="razorpayKeyId">Razorpay Key ID</Label>
              <Input
                id="razorpayKeyId"
                value={paymentSettings.razorpayKeyId}
                onChange={(e) => handlePaymentSettingChange('razorpayKeyId', e.target.value)}
                placeholder="Enter your Razorpay Key ID"
              />
            </div>
          )}
          
          <Separator />
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="stripeEnabled">Stripe</Label>
              <p className="text-sm text-muted-foreground">Accept international payments via Stripe</p>
            </div>
            <Switch
              id="stripeEnabled"
              checked={paymentSettings.stripeEnabled}
              onCheckedChange={(checked) => handlePaymentSettingChange('stripeEnabled', checked)}
            />
          </div>
          
          <Separator />
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="codEnabled">Cash on Delivery</Label>
              <p className="text-sm text-muted-foreground">Allow cash on delivery payments</p>
            </div>
            <Switch
              id="codEnabled"
              checked={paymentSettings.codEnabled}
              onCheckedChange={(checked) => handlePaymentSettingChange('codEnabled', checked)}
            />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function SecurityTab() {
  const [securitySettings, setSecuritySettings] = useState<SecuritySettings>({
    twoFactorEnabled: false,
    sessionTimeout: 30,
    passwordRequirements: {
      minLength: 8,
      requireSpecialChars: true,
      requireNumbers: true
    }
  });

  const handleSecurityChange = (field: string, value: any) => {
    if (field === 'passwordRequirements.minLength') {
      setSecuritySettings(prev => ({
        ...prev,
        passwordRequirements: { ...prev.passwordRequirements, minLength: value }
      }));
    } else if (field === 'passwordRequirements.requireSpecialChars') {
      setSecuritySettings(prev => ({
        ...prev,
        passwordRequirements: { ...prev.passwordRequirements, requireSpecialChars: value }
      }));
    } else if (field === 'passwordRequirements.requireNumbers') {
      setSecuritySettings(prev => ({
        ...prev,
        passwordRequirements: { ...prev.passwordRequirements, requireNumbers: value }
      }));
    } else {
      setSecuritySettings(prev => ({ 
        ...prev, 
        [field as keyof SecuritySettings]: value 
      }));
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="h-5 w-5" />
          Security Settings
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-0.5">
            <Label htmlFor="twoFactorEnabled">Two-Factor Authentication</Label>
            <p className="text-sm text-muted-foreground">Add an extra layer of security to your account</p>
          </div>
          <Switch
            id="twoFactorEnabled"
            checked={securitySettings.twoFactorEnabled}
            onCheckedChange={(checked) => handleSecurityChange('twoFactorEnabled', checked)}
          />
        </div>
        
        <Separator />
        
        <div className="space-y-2">
          <Label htmlFor="sessionTimeout">Session Timeout (minutes)</Label>
          <Input
            id="sessionTimeout"
            type="number"
            value={securitySettings.sessionTimeout}
            onChange={(e) => handleSecurityChange('sessionTimeout', parseInt(e.target.value))}
            className="w-32"
          />
        </div>
        
        <Separator />
        
        <div className="space-y-4">
          <Label>Password Requirements</Label>
          
          <div className="space-y-2">
            <Label htmlFor="minLength">Minimum Length</Label>
            <Input
              id="minLength"
              type="number"
              value={securitySettings.passwordRequirements.minLength}
              onChange={(e) => handleSecurityChange('passwordRequirements.minLength', parseInt(e.target.value))}
              className="w-32"
            />
          </div>
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="requireSpecialChars">Require Special Characters</Label>
              <p className="text-sm text-muted-foreground">Passwords must contain special characters</p>
            </div>
            <Switch
              id="requireSpecialChars"
              checked={securitySettings.passwordRequirements.requireSpecialChars}
              onCheckedChange={(checked) => handleSecurityChange('passwordRequirements.requireSpecialChars', checked)}
            />
          </div>
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="requireNumbers">Require Numbers</Label>
              <p className="text-sm text-muted-foreground">Passwords must contain numbers</p>
            </div>
            <Switch
              id="requireNumbers"
              checked={securitySettings.passwordRequirements.requireNumbers}
              onCheckedChange={(checked) => handleSecurityChange('passwordRequirements.requireNumbers', checked)}
            />
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

export default function SettingsPage() {
  const { getIdToken } = useAuth();

  return (
    <div className="flex flex-col h-full w-full overflow-hidden">
      <MobileHeader 
        title="Settings" 
        subtitle="Manage your store preferences and configuration" 
        actions={<SettingsActions />} 
      />

      <main className="flex-1 overflow-auto bg-gray-50 dark:bg-gray-900">
        <div className="p-4 lg:p-6 xl:p-8">
          <Tabs defaultValue="store" className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="store" className="flex items-center gap-2">
                <Store className="h-4 w-4" />
                Store
              </TabsTrigger>
              <TabsTrigger value="notifications" className="flex items-center gap-2">
                <Bell className="h-4 w-4" />
                Notifications
              </TabsTrigger>
              <TabsTrigger value="payment" className="flex items-center gap-2">
                <CreditCard className="h-4 w-4" />
                Payment
              </TabsTrigger>
              <TabsTrigger value="security" className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                Security
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="store">
              <StoreSettingsTab />
            </TabsContent>
            
            <TabsContent value="notifications">
              <NotificationsTab />
            </TabsContent>
            
            <TabsContent value="payment">
              <PaymentTab />
            </TabsContent>
            
            <TabsContent value="security">
              <SecurityTab />
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  );
}
