generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and authorization
model User {
  id                    Int      @id @default(autoincrement())
  email                 String   @unique
  password              String
  firstName             String
  lastName              String
  role                  String   @default("user") // user, admin, moderator
  isActive              Boolean  @default(true)
  emailVerified         Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  lastLogin             DateTime?
  failedLoginAttempts   Int      @default(0)
  lockedUntil           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  orders    Order[]
  carts     Cart[]
  sessions  UserSession[]
  returns   ReturnRequest[]
}

// User sessions for secure session management
model UserSession {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float    // Base price
  inventory   Int      @default(0) // Total inventory (sum of all variants)
  slug        String   @unique
  imageUrl    String?
  status      String   @default("active")
  hasVariants Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  cartItems            CartItem[]
  orderItems           OrderItem[]
  productsToCollections ProductToCollection[]
  images               ProductImage[]
  variants             ProductVariant[]
  options              ProductOption[]
  returnItems          ReturnItem[]
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String   // e.g., "Size", "Color"
  position  Int      @default(0)
  createdAt DateTime @default(now())

  product Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  values  ProductOptionValue[]

  @@unique([productId, name])
}

model ProductOptionValue {
  id       Int    @id @default(autoincrement())
  optionId Int
  value    String // e.g., "Small", "Red"
  position Int    @default(0)

  option   ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variants VariantOptionValue[]

  @@unique([optionId, value])
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  title     String
  price     Float
  sku       String?  @unique
  inventory Int      @default(0)
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product    Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]
  options    VariantOptionValue[]
  returnItems ReturnItem[]
}

model VariantOptionValue {
  id        Int @id @default(autoincrement())
  variantId Int
  optionValueId Int

  variant     ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValue ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)

  @@unique([variantId, optionValueId])
}

model StoreSetting {
  id       Int    @id @default(autoincrement())
  key      String @unique
  value    String
  category String @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Collection {
  id          Int      @id @default(autoincrement())
  title       String
  handle      String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productsToCollections ProductToCollection[]
}

model ProductToCollection {
  productId    Int
  collectionId Int

  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int?
  sessionId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  variantId Int?
  quantity  Int @default(1)

  cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  returns ReturnRequest[]
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     Int?
  customerId Int?     // Keep for backwards compatibility
  totalPrice Float
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cancelledAt DateTime?
  closedAt    DateTime?
  processedAt DateTime?

  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  customer   Customer?  @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  returns    ReturnRequest[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  variantId Int?
  quantity  Int   @default(1)
  price     Float

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  validFrom  DateTime
  validUntil DateTime
  maxUses    Int      @default(0)
  usedCount  Int      @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Returns and RMA Management
model ReturnRequest {
  id             String      @id @default(cuid())
  rmaNumber      String      @unique
  orderId        Int
  userId         Int?
  customerId     Int?
  status         String      @default("requested") // requested, approved, rejected, processing, completed, cancelled
  reason         String
  reasonCategory String      // defective, wrong_item, changed_mind, damaged, other
  description    String?
  refundAmount   Float       @default(0)
  refundMethod   String?     // original_payment, store_credit, exchange
  priority       String      @default("normal") // low, normal, high, urgent
  
  // Tracking Information
  trackingNumber String?
  carrierName    String?
  returnLabel    String?     // URL to return shipping label
  
  // Processing Details
  processedBy    String?     // Admin user who processed the return
  processedAt    DateTime?
  approvedAt     DateTime?
  rejectedAt     DateTime?
  completedAt    DateTime?
  
  // Customer Communication
  customerNotes  String?
  adminNotes     String?
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  order          Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user           User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  customer       Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  returnItems    ReturnItem[]
  returnUpdates  ReturnUpdate[]
}

model ReturnItem {
  id          Int     @id @default(autoincrement())
  returnId    String
  productId   Int
  variantId   Int?
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  condition   String  @default("returned") // returned, damaged, defective, missing
  
  // Product details at time of return
  productName String
  variantTitle String?
  
  createdAt   DateTime @default(now())

  // Relations
  return      ReturnRequest   @relation(fields: [returnId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model ReturnUpdate {
  id          Int      @id @default(autoincrement())
  returnId    String
  status      String   // Status when this update was made
  message     String
  isPublic    Boolean  @default(true) // Whether customer can see this update
  createdBy   String   // Admin user who created this update
  createdAt   DateTime @default(now())

  // Relations
  return      ReturnRequest @relation(fields: [returnId], references: [id], onDelete: Cascade)
}